************************************************************************************************************************************************
					***** Golang-S6.1(Hands-on) Loops in Go Programming ***** 
************************************************************************************************************************************************
 Loops in the Go programming language (Golang):
---------------------------------------------------------------------

1. **For Loop**
--------------------------
This is the most basic loop in Go and is used for iterating over a range of values.

package main

import "fmt"

   func main() {
       for i := 0; i < 5; i++ {
           fmt.Println(i)
       }
   }

Output:
------------
> go run .\03ForLoop.go
0
1
2
3
4

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2. **While Loop (Simulation)**
---------------------------------------------
Go doesn't have a `while` keyword, but you can simulate it using a `for` loop.


   package main

   import "fmt"

   func main() {
       i := 0
       for i < 5 {
           fmt.Println(i)
           i++
       }
   }

Output:
-------------
> go run .\04WhileSimulation.go
0
1
2
3
4
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3. **Infinite Loop with Break**
-----------------------------------------------
 You can create an infinite loop and use a `break` statement to exit it when a certain condition is met.

   package main

   import "fmt"

   func main() {
       i := 0
       for {
           fmt.Println(i)
           i++
           if i == 7 {
               break
           }
       }
   }

Output:
------------
> go run .\05InfiniteLoopwithBreak.go
0
1
2
3
4
5
6

// Another Way Infinite Loop

package main

import "fmt"

func main() {
	for {
		fmt.Println("Looping..")
	}

}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
** Goto Statement **
----------------------------------
// Example of using goto (not recommended)
package main

import "fmt"

func main() {
	//  Example of using goto (not recommended)
	i := 0
LoopStart:
	fmt.Println(i)
	i++
	if i < 5 {
		goto LoopStart
	}
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4. **For-Range Loop**
------------------------------------
Go provides a convenient way to iterate over elements of an array, slice, map, or string using the `range` keyword.

   package main

   import "fmt"

   func main() {
       numbers := []int{1, 2, 3, 4, 5}
       for index, value := range numbers {
           fmt.Printf("Index: %d, Value: %d\n", index, value)
       }
   }

Output:
-------------
> go run .\06ForRangeLoop.go
Index: 0, Value: 1
Index: 1, Value: 2
Index: 2, Value: 3
Index: 3, Value: 4
Index: 4, Value: 5

// It's an explicit declaration and initialization of an array.
package main

import "fmt"

func main() {
	// It's an explicit declaration and initialization of an array.
	var intArray = [5]int{2, 4, 6, 8, 10}
	for index, value := range intArray {
		fmt.Printf("Index: %d, Value: %d\n", index, value)
	}
}

> go run .\08ForRangeLoop3.go
Index: 0, Value: 2
Index: 1, Value: 4 
Index: 2, Value: 6 
Index: 3, Value: 8 
Index: 4, Value: 10
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5. **Nested Loop**
--------------------------------
You can have loops inside other loops, allowing you to perform operations on multiple dimensions.

   package main

   import "fmt"

   func main() {
       // Outer loop
       for i := 0; i < 3; i++ {
      // Inner loop
           for j := 0; j < 2; j++ {
               fmt.Printf("i: %d, j: %d\n", i, j)
           }
       }
   }

Output:
------------
> go run .\09NestedLoop.go
i: 0, j: 0
i: 0, j: 1
i: 1, j: 0
i: 1, j: 1
i: 2, j: 0
i: 2, j: 1
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6. ** All in one Glance **
---------------------------------------
package main

import "fmt"

func main() {
	start := 1
	username := []string{"Alias", "Benfingle", "Prakhas", "Shadab", "Harpreet"}
	fmt.Println(username)
	for i := 0; i < 10; i++ {
		fmt.Println(i + start)
	}

	for i := 0; i < len(username); i++ {
		fmt.Println(username[i])
	}

	for i := range username {
		fmt.Println(username[i])
	}

	for start < 100 {
		start += start
		if start == 32 {
			goto akhtar
		}
		fmt.Println("Start now :", start)
	}

akhtar:
	fmt.Println("This is my surname")
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




