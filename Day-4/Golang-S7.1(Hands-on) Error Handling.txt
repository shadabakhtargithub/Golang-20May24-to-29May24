*************************************************************************************************************************************************
					***** Golang-S7.1(Hands-on) Error Handling ***** 
*************************************************************************************************************************************************
// Simple Error Handling
package main

import (
	"fmt"
	"os"
)

func main() {
	file, err := os.Open("example.txt")
	if err != nil {
		fmt.Println("Error:", err)
		return
	}
	defer file.Close()

	// Continue processing the file
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Error Propagation
package main

import (
	"fmt"
	"os"
)

func main() {
	err := readFile("example.txt")
	if err != nil {
		fmt.Println("Error:", err)
		return
	}

	// Continue processing
}

func readFile(filename string) error {
	file, err := os.Open(filename)
	if err != nil {
		return err
	}
	defer file.Close()

	// Process the file
	return nil
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Error Wrapping
package main

import (
	"fmt"
	"io/ioutil"
)

func main() {
	err := readAndProcessFile("example.txt")
	if err != nil {
		fmt.Println("Error:", err)
		return
	}

	// Continue processing
}

func readAndProcessFile(filename string) error {
	data, err := ioutil.ReadFile(filename)
	if err != nil {
		return fmt.Errorf("error reading file: %w", err)
	}

	// Process data
	return nil
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Custom Error Types
package main

import (
	"errors"
	"fmt"
)

type MyError struct {
	Message string
}

func (e *MyError) Error() string {
	return e.Message
}

func main() {
	err := process()
	if err != nil {
		fmt.Println("Error:", err)
		return
	}

	// Continue processing
}

func process() error {
	// Simulate an error
	return &MyError{Message: "Something went wrong"}
}
*************************************************************************************************************************************************
							***** END ***** 
*************************************************************************************************************************************************
