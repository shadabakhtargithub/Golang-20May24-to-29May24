************************************************************************************************************************************************
					***** Golang-S12.2(Hands-on) Defer in Golang ***** 
************************************************************************************************************************************************
// Defer in Golang

package main

import "fmt"

func main() {
	// Defer work for LIFO(Last in First out)

	defer fmt.Println("One")
	defer fmt.Println("Two")
	defer fmt.Println("Three")
	defer fmt.Println("Four")
	defer fmt.Println("Five")
	defer fmt.Println("World")
	fmt.Println("Hello")
	mydefer()

}

func mydefer() {
	for i := 0; i < 5; i++ {
		defer fmt.Println(i)
	}
}

In your Go code, you're using the `defer` statement to schedule function calls to be executed just before a surrounding function returns. Here's what your code does:

1. In the `main` function:
   - You have several `defer` statements that schedule function calls.
   - These deferred functions will execute in a last-in, first-out (LIFO) order, which means "Five" will be the first to be executed, followed by "Four," "Three," "Two," and "One."
   - You also call the `mydefer` function, which contains its own `for` loop with deferred function calls.

2. In the `mydefer` function:
   - A `for` loop runs from 0 to 4, scheduling each value to be printed using `defer`. These deferred functions will execute in the reverse order as well, from 4 to 0.

3. Finally, "Hello" is printed in the `main` function, followed by the execution of deferred functions.

Here's the expected output:

Hello
0
1
2
3
4
One
Two
Three
Four
Five
World

As you can see, the `fmt.Println` statements inside the `defer` statements are executed in a LIFO order, with the inner `defer` calls executing before the outer ones. This 
demonstrates the LIFO behavior of `defer` in Go.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
