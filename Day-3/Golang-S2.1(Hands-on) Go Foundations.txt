*************************************************************************************************************************************************
					****** Golang-S2.1(Hands-on) Package in Go Programming ****** 
*************************************************************************************************************************************************
// Go Hello World Program

package main
import "fmt"

func main(){
fmt.Println("Hello Go World")
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// `fmt` Package, Short Declaration and Initialization Variables

package main
import "fmt"

func main() {
    name := "John"
    age := 30
    fmt.Printf("Hello, my name is %s, and I am %d years old.\n", name, age)
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Go Condition

package main
import "fmt"

func main(){
a := 10

if a > 5 {
fmt.Printf("Greater than Five")
}else{
fmt.Printf("Less than Five")
}
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// && Operator

package main
import "fmt"

func main() {
    a := 10
    b := 20

    if a < 15 && b > 15 {
        fmt.Println("Both conditions are true")
    }
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Go Loop

package main
import "fmt"

func main(){
for i:=1; i<10; i++{
fmt.Println(i)
}
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Go Imperative Style - Describes how to achieve a result (e.g., "first do this, then do that")

package main

import "fmt"

func main() {
    sum := 0 //Implicit delearation of variable
    for i := 1; i <= 10; i++ {
        sum += i
    }
    fmt.Println("Sum:", sum)
}


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// `os` Package (working with command-line arguments):

package main

import (
    "fmt"
    "os"
)

func main() {
    args := os.Args[1:] // Get command-line arguments (excluding program name)
    
    fmt.Println("Command-line arguments:")
    for i, val := range args {
        fmt.Printf("Arg %d: %s\n", i+1, val)
    }
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Go String

package main

import "fmt"

func main() {
	name := "Shadab"
	fmt.Printf("My name is %s, \nType is: %T", name, name)
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//  `strings` Package:

package main

import (
    "fmt"
    "strings"
)

func main() {
    sentence := "The quick brown fox jumps over the lazy dog"
    words := strings.Fields(sentence)
    fmt.Printf("Number of words: %d\n", len(words))
    fmt.Println("Uppercase:", strings.ToUpper(sentence))
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// **Switch Statement**

package main

import "fmt"

func main() {
    i := 2
    switch i {
    case 1:
        fmt.Println("One")
    case 2:
        fmt.Println("Two")
    default:
        fmt.Println("Other")
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Functions

package main

import "fmt"

// Simple function
func add(x int, y int) int {
    return x + y
}

// Function with multiple return values
func swap(a, b string) (string, string) {
    return b, a
}

func main() {
    fmt.Println(add(3, 4))

    x, y := swap("hello", "world")
    fmt.Println(x, y)
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//  `math` Package:

package main

import (
    "fmt"
    "math"
)

func main() {
    x := 4.0
    y := 2.0
    fmt.Printf("Square root of %f is %f\n", x, math.Sqrt(x))
    fmt.Printf("Value of Pi: %f\n", math.Pi)
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// `io` Package (basic usage for reading and writing):

package main

import (
    "fmt"
    "io/ioutil"
    "os"
)

func main() {
    // Writing to a file
    data := []byte("Hello, Go!")
    err := ioutil.WriteFile("example.txt", data, 0644)
    if err != nil {
        fmt.Println(err)
    }

    // Reading from a file
    content, err := ioutil.ReadFile("example.txt")
    if err != nil {
        fmt.Println(err)
    } else {
        fmt.Println("File content:", string(content))
    }

    // Removing the file
    err = os.Remove("example.txt")
    if err != nil {
        fmt.Println(err)
    }
}

File Permission:
===============
0644

r --> 4
w --> 2
x --> 1

U --> User/Owner
G --> Group
O --> Ohters

chmod
----------
file(s)/directory

chown for ownership

Example:
-------------
chmod 777 example.txt
chmod 766 file1.txt
chmod -R 777 dir

chown azure:azure dir2

chown admin:admin dir2

Example Azure RHEL:
====================
[azureuser@Developer1 ~]$ ll package_dir1/
total 4
-rw-rw-r--. 1 azureuser azureuser 606 May 21 06:58 1_file.go

drwxrwxr-x. 2 azureuser azureuser       23 May 21 06:58 package_dir1

[azureuser@Developer1 package_dir1]$ cat /etc/os-release
NAME="Red Hat Enterprise Linux"
VERSION="8.7 (Ootpa)"


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// `bufio` Package (reading input with buffering):

package main

import (
    "bufio"
    "fmt"
    "os"
)

func main() {
    scanner := bufio.NewScanner(os.Stdin)
    fmt.Print("Enter your name: ")
    scanner.Scan()
    name := scanner.Text()
    fmt.Printf("Hello, %s!\n", name)
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Slice

package main

import "fmt"

func main() {
    s := []int{1, 2, 3}
    v := 4
    s = append(s, v)
    fmt.Println(s) 
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Map

package main

import "fmt"

func main() {
    m := make(map[string]int)
    fmt.Println(m["Go"]) 
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Structs and Methods - **Structs**

package main

import "fmt"

type Person struct {
    Name string
    Age  int
}

func main() {
    p := Person{Name: "Alice", Age: 30}
    fmt.Println(p)
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// `strconv` Package:

package main

import (
    "fmt"
    "strconv"
)

func main() {
    str := "42"
    num, err := strconv.Atoi(str)
    if err != nil {
        fmt.Println("Conversion error:", err)
    } else {
        fmt.Printf("Converted to integer: %d\n", num)
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// `time` Package:

package main

import (
    "fmt"
    "time"
)

func main() {
    currentTime := time.Now()
    fmt.Println("Current time:", currentTime)

    futureTime := currentTime.Add(2 * time.Hour)
    fmt.Println("Time in 2 hours:", futureTime)

    format := "2006-01-02 15:04:05"
    customTime, _ := time.Parse(format, "2023-09-29 14:30:00")
    fmt.Println("Custom time:", customTime)
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//  **Methods**

package main

import "fmt"

type Rectangle struct {
    Width, Height int
}

// Method with a receiver
func (r Rectangle) Area() int {
    return r.Width * r.Height
}

func main() {
    rect := Rectangle{Width: 10, Height: 5}
    fmt.Println("Area:", rect.Area())
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Concurrency - **Goroutines**

package main

import (
    "fmt"
    "time"
)

func say(s string) {
    for i := 0; i < 3; i++ {
        time.Sleep(100 * time.Millisecond)
        fmt.Println(s)
    }
}

func main() {
    go say("world")
    say("hello")
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// **Channels**

package main

import "fmt"

func sum(s []int, c chan int) {
    sum := 0
    for _, v := range s {
        sum += v
    }
    c <- sum // Send sum to channel
}

func main() {
    s := []int{1, 2, 3, 4, 5}
    c := make(chan int)
    go sum(s[:len(s)/2], c)
    go sum(s[len(s)/2:], c)
    x, y := <-c, <-c // Receive from channel
    fmt.Println(x, y, x+y)
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Go program that demonstrates the use of defer to manage resources

package main
import (
    "fmt"
    "os"
)

func main() {
    // Open a file
    file, err := os.Open("example.txt")
    if err != nil {
        fmt.Println("Error opening file:", err)
        return
    }

    // Ensure the file is closed when the function returns
    defer file.Close()

    // Perform operations with the file
    fileInfo, err := file.Stat()
    if err != nil {
        fmt.Println("Error getting file info:", err)
        return
    }

    // Print file info
    fmt.Println("File Name:", fileInfo.Name())
    fmt.Println("File Size:", fileInfo.Size())
    fmt.Println("File Mode:", fileInfo.Mode())
    fmt.Println("Last Modified:", fileInfo.ModTime())
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Refereces:
==========
https://pkg.go.dev
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
								------ END ------ 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------