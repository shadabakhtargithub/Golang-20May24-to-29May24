*************************************************************************************************************************************************
					****** Golang-S10(Hands-on) Package in Go Programming ****** 
*************************************************************************************************************************************************
Here are examples for each of the essential Go packages I mentioned:

1. `fmt` Package:
-------------------------

package main

import "fmt"

func main() {
    name := "John"
    age := 30
    fmt.Printf("Hello, my name is %s, and I am %d years old.\n", name, age)
}


2. `math` Package:
--------------------------

package main

import (
    "fmt"
    "math"
)

func main() {
    x := 4.0
    y := 2.0
    fmt.Printf("Square root of %f is %f\n", x, math.Sqrt(x))
    fmt.Printf("Value of Pi: %f\n", math.Pi)
}


3. `io` Package (basic usage for reading and writing):
------------------------------------------------------------------------
package main

import (
    "fmt"
    "io/ioutil"
    "os"
)

func main() {
    // Writing to a file
    data := []byte("Hello, Go!")
    err := ioutil.WriteFile("example.txt", data, 0644)
    if err != nil {
        fmt.Println(err)
    }

    // Reading from a file
    content, err := ioutil.ReadFile("example.txt")
    if err != nil {
        fmt.Println(err)
    } else {
        fmt.Println("File content:", string(content))
    }

    // Removing the file
    err = os.Remove("example.txt")
    if err != nil {
        fmt.Println(err)
    }
}


4. `os` Package (working with command-line arguments):
-------------------------------------------------------------------------------

package main

import (
    "fmt"
    "os"
)

func main() {
    args := os.Args[1:] // Get command-line arguments (excluding program name)
    
    fmt.Println("Command-line arguments:")
    for i, arg := range args {
        fmt.Printf("Arg %d: %s\n", i+1, arg)
    }
}


5. `bufio` Package (reading input with buffering):
-------------------------------------------------------------------
package main

import (
    "bufio"
    "fmt"
    "os"
)

func main() {
    scanner := bufio.NewScanner(os.Stdin)
    fmt.Print("Enter your name: ")
    scanner.Scan()
    name := scanner.Text()
    fmt.Printf("Hello, %s!\n", name)
}


6. `strings` Package:
-----------------------------
package main

import (
    "fmt"
    "strings"
)

func main() {
    sentence := "The quick brown fox jumps over the lazy dog"
    words := strings.Fields(sentence)
    fmt.Printf("Number of words: %d\n", len(words))
    fmt.Println("Uppercase:", strings.ToUpper(sentence))
}


7. `strconv` Package:
------------------------------
package main

import (
    "fmt"
    "strconv"
)

func main() {
    str := "42"
    num, err := strconv.Atoi(str)
    if err != nil {
        fmt.Println("Conversion error:", err)
    } else {
        fmt.Printf("Converted to integer: %d\n", num)
    }
}


8. `time` Package:
---------------------------
package main

import (
    "fmt"
    "time"
)

func main() {
    currentTime := time.Now()
    fmt.Println("Current time:", currentTime)

    futureTime := currentTime.Add(2 * time.Hour)
    fmt.Println("Time in 2 hours:", futureTime)

    format := "2006-01-02 15:04:05"
    customTime, _ := time.Parse(format, "2023-09-29 14:30:00")
    fmt.Println("Custom time:", customTime)
}


These examples cover basic usage of each package. As you become more proficient with Go, you can explore more advanced features and use these packages to build more 
complex applications.